Proposal of Interface and Requirements for Persistence
====================================

**************************
Abstract
**************************
The Furious framework needs a persistence layer to enable a
callback when a group of tasks have all completed. These are the
functions the persistence layer implements. Some are optional
functions to implement logic optimized to a particular persistence
technology. The framework implements the logic which works
with any key/value storage system, which will be used if the 
persistence layer has not implemented custom logic.

**************************
Specification
**************************

Marker and Marker Graph Storage
-------------------------------------

``marker_persist(marker, save_leaves=True)``

``marker_get(idx, load_results=False)``

``marker_get_multi(ids, load_results=False)``

Context Storage
-------------------------------------

``store_context(idx, context_dict)``

``load_context(idx)``

Operational Storage
-------------------------------------
Implementation optional

``mark_reached(marker_id, key)``

``reached_by_another_request(marker_id, key)``


Logical Functions Requiring Storage
-------------------------------------
Implementation optional

``filter_known_done(ids)``

``all_done(ids)``
